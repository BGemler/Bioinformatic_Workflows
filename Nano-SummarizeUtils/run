#!/bin/bash

# define the current image to be used by script
DOCKERIMAGE="nano_summarizeutils"

set -eo pipefail

help() {
echo -e "Run Post-Pipeline Summarization/Utils Scripts\n\n
 Usage:\n\n

 ./run [Quality report fldr] [TaxClass report fldr] [Result Location]\n
 \n"
}

function check_paths() {
 # Get absolute result paths for mounting
 # Note that the directory containing a file is gathered (if applicable)
 QUALRPT=$(realpath ${1%/*})
 TAXCLASS=$(realpath ${2%/*})
 RESULTDIR=$(realpath ${3%/*})

 if ! [[ -d $QUALRPT ]]; then 
 echo -e "\nThe directory containing query ${QUALRPT} doesn\'t exist. 
         Please check the path provided and re-run the script."; 
 exit 1;
 fi

 if ! [[ -d $TAXCLASS ]]; then 
 echo -e "\nThe directory containing query ${TAXCLASS} doesn\'t exist. 
         Please check the path provided and re-run the script."; 
 exit 1;
 fi

 # Results directory can be created if it doesn't exist 
 if ! [[ -d $RESULTDIR ]]; then
  # redirect to stderr so function only returns prinft output 
  echo -e "\nCreating output directory: ${RESULTDIR}\n" >&2 
  mkdir -p "${RESULTDIR}"
 fi

 # return the mount path
 printf " -v %s:/qual_rpts/ -v %s:/taxclass/ -v %s:/results/" "$QUALRPT" "$TAXCLASS" "$RESULTDIR";
}


# If incorrect number of arguments given, throw help and exit
if ! [[ $# -eq 3 ]]; then help && exit 0; fi

QUALRPT=$1
TAXCLASS=$2
RESULTDIR=$3

# Get paths for mounting
MOUNTPATHS=$(check_paths $QUALRPT $TAXCLASS $RESULTDIR)

# Get just the file name for the reference genome
RESULT_FILE="${RESULTDIR##*/}"
if [[ -z $RESULT_FILE ]]; then
  RESULT_FILE="."
fi

docker run --rm $MOUNTPATHS -u $(id -u):$(id -g) $DOCKERIMAGE /scripts/main.py $RESULT_FILE
